import com.kgurgul.cpuinfo.buildsrc.DependencyUpdates
import com.kgurgul.cpuinfo.buildsrc.Libs
import com.kgurgul.cpuinfo.buildsrc.ReleaseType

apply plugin: "com.github.ben-manes.versions"

buildscript {

    ext {
        minSdk = 16
        targetSdk = 30
        compiledSdk = 30
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath Libs.androidGradlePlugin
        classpath Libs.gradleVersionsPlugin
        classpath Libs.Kotlin.gradlePlugin
        classpath Libs.Hilt.gradlePlugin
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            allWarningsAsErrors = true

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"
        }
    }
}

/**
 * Update dependencyUpdates task to reject versions which are more 'unstable' than our
 * current version.
 */
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        def current = DependencyUpdates.versionToRelease(it.currentVersion)
        // If we're using a SNAPSHOT, ignore since we must be doing so for a reason.
        if (current == ReleaseType.SNAPSHOT) return true

        // Otherwise we reject if the candidate is more 'unstable' than our version
        def candidate = DependencyUpdates.versionToRelease(it.candidate.version)
        return candidate.isLessStableThan(current)
    }
}