import com.kgurgul.cpuinfo.buildsrc.Libs

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
    useBuildCache = true
}

apply from: "$rootDir/versioning.gradle"
apply plugin: 'dagger.hilt.android.plugin'

Properties signingProperties = getReleaseSigningConfig()

android {
    compileSdkVersion compiledSdk

    defaultConfig {
        applicationId "com.kgurgul.cpuinfo"
        minSdkVersion project.minSdk
        targetSdkVersion project.targetSdk
        versionCode generatedVersionCode
        versionName generatedVersionName
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
            }
        }
    }

    signingConfigs {
        releaseVersion {
            storeFile file(signingProperties.getProperty('keyPath'))
            storePassword signingProperties.getProperty('keyPass')
            keyAlias signingProperties.getProperty('keyAlias')
            keyPassword signingProperties.getProperty('keyPass')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.releaseVersion
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            testCoverageEnabled true
            applicationIdSuffix ".debug"
        }
    }

    externalNativeBuild {
        cmake {
            version '3.10.2'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    buildFeatures {
        dataBinding true
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation Libs.Kotlin.stdlib

    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.activityKtx
    implementation Libs.AndroidX.fragmentKtx
    implementation Libs.AndroidX.appCompat
    implementation Libs.AndroidX.preference
    implementation Libs.AndroidX.swipeRefreshLayout
    implementation Libs.AndroidX.constraintLayout
    implementation Libs.AndroidX.multiDex

    implementation Libs.AndroidX.Lifecycle.extensions
    implementation Libs.AndroidX.Lifecycle.viewModelKtx
    implementation Libs.AndroidX.Lifecycle.liveDataKtx
    implementation Libs.AndroidX.Lifecycle.common

    implementation Libs.AndroidX.Navigation.fragment
    implementation Libs.AndroidX.Navigation.ui

    implementation Libs.Google.material
    implementation Libs.Google.gson

    implementation Libs.Rx.rxJava
    implementation Libs.Rx.rxAndroid

    implementation Libs.Coroutines.core
    implementation Libs.Coroutines.android

    implementation Libs.Dagger.android
    implementation Libs.Dagger.viewModelExt
    implementation Libs.Dagger.workManagerExt
    kapt Libs.Dagger.androidCompiler
    kapt Libs.Dagger.hiltCompiler

    implementation Libs.Glide.glide
    kapt Libs.Glide.compiler

    implementation Libs.Airbnb.epoxy
    implementation Libs.Airbnb.dataBinding
    kapt Libs.Airbnb.processor

    implementation Libs.bus
    implementation Libs.timber
    implementation Libs.relinker
    implementation Libs.csv

    testImplementation Libs.junit
    testImplementation Libs.AndroidX.Test.core
    testImplementation Libs.AndroidX.Test.archCoreTesting
    testImplementation Libs.mockitoCore
    testImplementation Libs.mockitoKotlin
    testImplementation Libs.robolectric

    androidTestImplementation Libs.AndroidX.Test.runner
    androidTestImplementation Libs.AndroidX.Test.rules
    androidTestImplementation Libs.AndroidX.Test.jUnitExt
    androidTestImplementation Libs.AndroidX.Test.Espresso.core
    androidTestImplementation Libs.AndroidX.Test.Espresso.contrib

    androidTestUtil Libs.AndroidX.Test.orchestrator
}

def getReleaseSigningConfig() {
    try {
        Properties localProp = new Properties()
        localProp.load(project.rootProject.file('local.properties').newDataInputStream())
        if (localProp.getProperty('keyPath') == null
                || localProp.getProperty('keyPass') == null
                || localProp.getProperty('keyAlias') == null) {
            return getDebugSigningConfig()
        } else {
            return localProp
        }
    } catch (FileNotFoundException ignored) {
        return getDebugSigningConfig()
    }
}

def getDebugSigningConfig() {
    logger.warn("Using default debug key instead of release key!")
    Properties properties = new Properties()
    def debugKeyDir = System.getenv('HOME') + "/.android/debug.keystore"
    properties.setProperty('keyPath', debugKeyDir)
    properties.setProperty('keyPass', 'android')
    properties.setProperty('keyAlias', 'androiddebugkey')
    properties.setProperty('keyPass', 'android')
    return properties
}
