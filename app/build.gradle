apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'io.fabric'

Properties signingProperties = getReleaseSigningConfig()

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.2'

    defaultConfig {
        applicationId "com.kgurgul.cpuinfo"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 31
        versionName "3.1"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        releaseVersion {
            storeFile file(signingProperties.getProperty('keyPath'))
            storePassword signingProperties.getProperty('keyPass')
            keyAlias signingProperties.getProperty('keyAlias')
            keyPassword signingProperties.getProperty('keyPass')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.releaseVersion
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions.incremental = true

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

androidExtensions {
    experimental = true
}

kapt {
    generateStubs = true
}

ext {
    supportVersion = "27.0.2"
    firebaseVersion = "11.8.0"
    androidPluginVersion = "2.3.0"
    archLifecycleVersion = "1.1.0"
    daggerVersion = "2.13"
    ankoVersion = "0.10.1"
    glideVersion = "4.3.1"
    espressoVersion = "3.0.1"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:preference-v14:$supportVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko-coroutines:$ankoVersion"

    // Android data binding
    kapt "com.android.databinding:compiler:$androidPluginVersion"

    // Firebase
    releaseImplementation 'com.crashlytics.sdk.android:crashlytics:2.8.0'
    implementation "com.google.firebase:firebase-core:$firebaseVersion"

    // Bus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // Rx
    implementation 'io.reactivex.rxjava2:rxjava:2.1.4'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // GSON
    implementation 'com.google.code.gson:gson:2.8.0'

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    // Timber
    implementation 'com.jakewharton.timber:timber:4.5.1'

    // Google arch
    implementation "android.arch.lifecycle:extensions:$archLifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$archLifecycleVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // Leak canary
/*    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.3'*/

    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.11.0"
    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"
    testImplementation "android.arch.core:core-testing:$archLifecycleVersion"

    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"
}

buildscript {
    ext.kotlin_version = '1.2.20'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
repositories {
    mavenCentral()
}

def getReleaseSigningConfig() {
    try {
        Properties localProp = new Properties()
        localProp.load(project.rootProject.file('local.properties').newDataInputStream())
        if (localProp.getProperty('keyPath') == null
            || localProp.getProperty('keyPass') == null
            || localProp.getProperty('keyAlias') == null) {
            return getDebugSigningConfig()
        } else {
            return localProp
        }
    } catch (FileNotFoundException ignored) {
        return getDebugSigningConfig()
    }
}

def getDebugSigningConfig() {
    logger.warn("Using default debug key instead of release key!")
    Properties properties = new Properties()
    def debugKeyDir = System.getenv('HOME') + "/.android/debug.keystore"
    properties.setProperty('keyPath', debugKeyDir)
    properties.setProperty('keyPass', 'android')
    properties.setProperty('keyAlias', 'androiddebugkey')
    properties.setProperty('keyPass', 'android')
    return properties
}

apply plugin: 'com.google.gms.google-services'
